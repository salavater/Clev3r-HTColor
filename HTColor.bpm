' send register - 0x41 (65)
'
' send value:
' 0x00 (0) - Active standart mode | will returns 9 values (9 bytes) with active LED
' 0x01 (1) - Passive raw mode | will returns 4 values (8 bytes, 2 bytes for 1 value) with passive LED
' 0x03 (3) - Active raw mode | will returns raw 4 values (8 bytes, 2 bytes for 1 value) with active LED
' 0x35 (53) - set 50Hz mode | will not return anything
' 0x36 (54) - set 60Hz mode | will not return anything
'
' read register - 0x42 (66)
' Active standart mode:
' 0x00 (0) - color number
' 0x01 (1) - red value
' 0x02 (2) - green value
' 0x03 (3) - blue value
' 0x04 (4) - white value
' 0x05 (5) - color index number (???)
' 0x06 (6) - normalized red value
' 0x07 (7) - normalized green value
' 0x08 (8) - normalized blue value
'
' Passive raw mode:
' 0x00 (0) - red value 1 byte
' 0x01 (1) - red value 2 byte
' 0x02 (2) - green value 1 byte
' 0x03 (3) - green value 2 byte
' 0x04 (4) - blue value 1 byte
' 0x05 (5) - blue value 2 byte
' 0x06 (6) - white value 1 byte
' 0x07 (7) - white value 2 byte
'
' Active raw mode:
' 0x00 (0) - red value 1 byte
' 0x01 (1) - red value 2 byte
' 0x02 (2) - green value 1 byte
' 0x03 (3) - green value 2 byte
' 0x04 (4) - blue value 1 byte
' 0x05 (5) - blue value 2 byte
' 0x06 (6) - white value 1 byte
' 0x07 (7) - white value 2 byte



Function getActiveStandartAll(in number port, out number[] bytes) 'mode 0 | readed 9 bytes, in result 9 values
  writeData[0] = 65
  writeData[1] = 0
  bytes = Sensor.CommunicateI2C(port, 1, 2, 9, writeData)
EndFunction

Function getPassiveRawRGBW(in number port, out number[] values) 'mode 1 | readed 8 bytes, in result 4 values
  writeData[0] = 65
  writeData[1] = 1
  bytes = Sensor.CommunicateI2C(port, 1, 2, 8, writeData)
  
  values[0] = bytes[0] * 256 + bytes[1] ' red value
  values[1] = bytes[2] * 256 + bytes[3] ' green value
  values[2] = bytes[4] * 256 + bytes[5] ' blue value
  values[3] = bytes[6] * 256 + bytes[7] ' white value
  
EndFunction

Function getActiveRawRGBW(in number port, out number[] values) 'mode 3 | readed 8 bytes, in result 4 values
  writeData[0] = 65
  writeData[1] = 3
  bytes = Sensor.CommunicateI2C(port, 1, 2, 8, writeData)
  
  values[0] = bytes[0] * 256 + bytes[1] ' red value
  values[1] = bytes[2] * 256 + bytes[3] ' green value
  values[2] = bytes[4] * 256 + bytes[5] ' blue value
  values[3] = bytes[6] * 256 + bytes[7] ' white value
  
EndFunction

Function set50Hz(in number port)
  writeData[0] = 65
  writeData[1] = 53
  bytes = Sensor.CommunicateI2C(port, 1, 2, 1, writeData)
EndFunction

Function set60Hz(in number port)
  writeData[0] = 65
  writeData[1] = 54
  bytes = Sensor.CommunicateI2C(port, 1, 2, 1, writeData)
EndFunction

Function RGBtoHSV(in number[] rgb, out number[] hsv)
  r1 = rgb[0]/255
  g1 = rgb[1]/255
  b1 = rgb[2]/255
  
  cMax = Math.Max(r1,Math.Max(g1,b1))
  cMin = Math.Min(r1,Math.Min(g1,b1))
  delta = cMax - cMin
  
  If cMax = r1 Then
    hsv[0] = 60 * Math.Remainder((g1-b1)/delta,6)
  EndIf
  If cMax = g1 Then
    hsv[0] = 60 * ((b1-r1)/delta + 2)
  EndIf
  If cMax = b1 Then
    hsv[0] = 60 * ((r1-g1)/delta + 4)
  EndIf
  
  hsv[1] = 0
  If cMax <> 0 Then
    hsv[1] = delta / cMax
  EndIf
  
  hsv[2] = cMax
EndFunction
